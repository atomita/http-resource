{
    var _ns_ = {
        id: 'atomita.http.request',
        doc: 'http request module'
    };
    var superagent = require('superagent');
    var bluebird = require('bluebird');
    var lodash = require('lodash');
}
var request = function request(method, url, params, options, clazz) {
    options = options || {};
    clazz = clazz || Object;
    return bluebird.resolve().then(function callApi() {
        return new bluebird(function (resolve, reject) {
            return function () {
                var apiø1 = superagent(method.toLowerCase(), url);
                lodash.has(options, 'query') ? apiø1.query(options.query) : void 0;
                lodash.has(options, 'header') ? apiø1.set(options.header) : void 0;
                return apiø1.send(params).end(function (err, response) {
                    return err || !response.ok ? reject(err || newError('undefined error.', response, err)) : resolve(response);
                });
            }.call(this);
        });
    }).then(function isObject(response) {
        return new bluebird(function (resolve, reject) {
            return options.isArray ? lodash.isArray(response.body) ? resolve(response) : reject(newError('Is not Array.', response)) : lodash.isObject(response.body) ? resolve(response) : reject(newError('Is not Object.', response));
        });
    }).then(function toResource(response) {
        return new bluebird(function (resolve, reject) {
            return options.isArray ? resolve(lodash.map(function (record) {
                return new clazz(record, response);
            })) : resolve(new clazz(response.body, response));
        });
    });
};
module.exports = request;
var newError = function newError(msg, response, err) {
    return function () {
        var newErrø1 = new Error(msg);
        return lodash.extend(newErrø1, {
            original: err,
            response: response,
            status: response ? response.status : null
        });
    }.call(this);
};
void 0;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbIl9uc18iLCJpZCIsImRvYyIsInJlcXVlc3QiLCJtZXRob2QiLCJ1cmwiLCJwYXJhbXMiLCJvcHRpb25zIiwiY2xhenoiLCJPYmplY3QiLCJibHVlYmlyZCIsInJlc29sdmUiLCJ0aGVuIiwiY2FsbEFwaSIsInJlamVjdCIsImFwacO4MSIsInN1cGVyYWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImxvZGFzaCIsImhhcyIsInF1ZXJ5Iiwic2V0IiwiaGVhZGVyIiwic2VuZCIsImVuZCIsImVyciIsInJlc3BvbnNlIiwib2siLCJuZXdFcnJvciIsImlzT2JqZWN0IiwiaXNBcnJheSIsImJvZHkiLCJ0b1Jlc291cmNlIiwibWFwIiwicmVjb3JkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1zZyIsIm5ld0VycsO4MSIsImV4dGVuZCIsInN0YXR1cyIsIm51bGwiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFDQSxJLEdBQUQ7QUFBQSxRQUFBQyxFLEVBQUksc0JBQUo7QUFBQSxRQUFBQyxHLEVBQ0UscUJBREY7QUFBQSxNOzs7OztBQU1BLElBQU9DLE9BQUEsR0FBUCxTQUFPQSxPQUFQLENBQ0dDLE1BREgsRUFDVUMsR0FEVixFQUNjQyxNQURkLEVBQ3FCQyxPQURyQixFQUM2QkMsS0FEN0IsRUFFRTtBQUFBLElBQU1ELE9BQU4sR0FBa0JBLE9BQUosSUFBWSxFQUExQjtBQUFBLElBQ01DLEtBQU4sR0FBZ0JBLEtBQUosSUFBVUMsTUFBdEIsQ0FEQTtBQUFBLElBRUEsT0FDRUMsUUFBQSxDQUFTQyxPQUFWLEVBQ0MsQ0FBQ0MsSSxDQUFLLFNBQUlDLE9BQUosR0FDRTtBQUFBLG1CLFFBQUEsQ0FBVyxVQUFLRixPQUFMLEVBQWFHLE1BQWIsRUFDRTtBQUFBLG1CLFlBQU07QUFBQSxvQkFBQUMsSyxHQUFLQyxVQUFELENBQWFaLE1BQUEsQ0FBT2EsV0FBUixFQUFaLEVBQW1DWixHQUFuQyxDQUFKO0FBQUEsZ0JBQ0NhLE1BQUEsQ0FBT0MsR0FBUixDQUFZWixPQUFaLEUsT0FBQSxDQUFKLEdBQ0dRLEtBQUEsQ0FBSUssS0FBTCxDQUFXYixPQUFBLENBQVFhLEtBQW5CLENBREYsRyxNQUFBLENBREk7QUFBQSxnQkFHQ0YsTUFBQSxDQUFPQyxHQUFSLENBQVlaLE9BQVosRSxRQUFBLENBQUosR0FDR1EsS0FBQSxDQUFJTSxHQUFMLENBQVNkLE9BQUEsQ0FBUWUsTUFBakIsQ0FERixHLE1BQUEsQ0FISTtBQUFBLGdCQUtKLE9BQ0VQLEtBQUEsQ0FBSVEsSUFBTCxDQUFVakIsTUFBVixDQUNDLENBQUNrQixHQUZILENBRU8sVUFBS0MsR0FBTCxFQUFTQyxRQUFULEVBQ0U7QUFBQSwyQkFBUUQsR0FBSixJQUFRLENBQUtDLFFBQUEsQ0FBU0MsRUFBMUIsR0FDR2IsTUFBRCxDQUFZVyxHQUFKLElBQVNHLFFBQUQsQ0FBVyxrQkFBWCxFQUE4QkYsUUFBOUIsRUFBdUNELEdBQXZDLENBQWhCLENBREYsR0FFR2QsT0FBRCxDQUFTZSxRQUFULENBRkY7QUFBQSxpQkFIVCxFQUxJO0FBQUEsYSxLQUFOLEMsSUFBQTtBQUFBLFNBRGI7QUFBQSxLLENBY1IsQ0FBQ2QsSSxDQUFLLFNBQUlpQixRQUFKLENBQWFILFFBQWIsRUFDRTtBQUFBLG1CLFFBQUEsQ0FBVyxVQUFLZixPQUFMLEVBQWFHLE1BQWIsRUFDRTtBQUFBLG1CQUFJUCxPQUFBLENBQVF1QixPQUFaLEdBQ09aLE1BQUEsQ0FBT1ksT0FBUixDQUFpQkosUUFBQSxDQUFTSyxJQUExQixDQUFKLEdBQ0dwQixPQUFELENBQVNlLFFBQVQsQ0FERixHQUVHWixNQUFELENBQVNjLFFBQUQsQ0FBVyxlQUFYLEVBQTJCRixRQUEzQixDQUFSLENBSEosR0FJT1IsTUFBQSxDQUFPVyxRQUFSLENBQWtCSCxRQUFBLENBQVNLLElBQTNCLENBQUosR0FDR3BCLE9BQUQsQ0FBU2UsUUFBVCxDQURGLEdBRUdaLE1BQUQsQ0FBU2MsUUFBRCxDQUFXLGdCQUFYLEVBQTRCRixRQUE1QixDQUFSLENBTko7QUFBQSxTQURiO0FBQUEsSyxDQVNSLENBQUNkLElBM0JILENBMkJRLFNBQUlvQixVQUFKLENBQWlCTixRQUFqQixFQUNFO0FBQUEsbUIsUUFBQSxDQUFXLFVBQUtmLE9BQUwsRUFBYUcsTUFBYixFQUNFO0FBQUEsbUJBQUlQLE9BQUEsQ0FBUXVCLE9BQVosR0FDR25CLE9BQUQsQ0FBVU8sTUFBQSxDQUFPZSxHQUFSLENBQVksVUFBS0MsTUFBTCxFQUFhO0FBQUEsMkIsS0FBQSxDQUFRQSxNQUFSLEVBQWVSLFFBQWY7QUFBQSxhQUF6QixDQUFULENBREYsR0FFR2YsT0FBRCxDQUFTLEksS0FBQSxDQUFRZSxRQUFBLENBQVNLLElBQWpCLEVBQXNCTCxRQUF0QixDQUFULENBRkY7QUFBQSxTQURiO0FBQUEsS0E1QlYsRUFGQTtBQUFBLENBRkYsQztBQXVDTVMsTUFBQSxDQUFPQyxPQUFiLEdBQXFCakMsT0FBckIsQztBQUlBLElBQU95QixRQUFBLEdBQVAsU0FBT0EsUUFBUCxDQUFrQlMsR0FBbEIsRUFBc0JYLFFBQXRCLEVBQStCRCxHQUEvQixFQUNFO0FBQUEsVyxZQUFNO0FBQUEsWUFBQWEsUSxHQUFRLEksS0FBQSxDQUFRRCxHQUFSLENBQVI7QUFBQSxRQUNKLE9BQUNuQixNQUFBLENBQU9xQixNQUFSLENBQWVELFFBQWYsRUFDZTtBQUFBLFksVUFBVWIsR0FBVjtBQUFBLFksVUFDVUMsUUFEVjtBQUFBLFksUUFFWUEsUUFBSixHQUFhQSxRQUFBLENBQVNjLE1BQXRCLEdBQTZCQyxJQUZyQztBQUFBLFNBRGYsRUFESTtBQUFBLEssS0FBTixDLElBQUE7QUFBQSxDQURGLEMiLCJzb3VyY2VzQ29udGVudCI6WyIobnMgYXRvbWl0YS5odHRwLnJlcXVlc3RcbiAgXCJodHRwIHJlcXVlc3QgbW9kdWxlXCJcbiAgKDpyZXF1aXJlIFtzdXBlcmFnZW50XVxuICAgICAgICAgICAgW2JsdWViaXJkXVxuICAgICAgICAgICAgW2xvZGFzaF0pKVxuXG4oZGVmbi0gcmVxdWVzdFxuICBbbWV0aG9kIHVybCBwYXJhbXMgb3B0aW9ucyBjbGF6el1cbiAgKHNldCEgb3B0aW9ucyAob3Igb3B0aW9ucyB7fSkpXG4gIChzZXQhIGNsYXp6IChvciBjbGF6eiBPYmplY3QpKVxuICAoLT5cbiAgIChibHVlYmlyZC5yZXNvbHZlKVxuICAgKC50aGVuIChmbiBjYWxsLWFwaSBbXVxuICAgICAgICAgICAgKGJsdWViaXJkLiAoZm4gW3Jlc29sdmUgcmVqZWN0XVxuICAgICAgICAgICAgICAgICAgICAgICAgIChsZXQgW2FwaSAoc3VwZXJhZ2VudCAobWV0aG9kLnRvLWxvd2VyLWNhc2UpIHVybCldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoaWYgKGxvZGFzaC5oYXMgb3B0aW9ucyA6cXVlcnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhcGkucXVlcnkgb3B0aW9ucy5xdWVyeSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoaWYgKGxvZGFzaC5oYXMgb3B0aW9ucyA6aGVhZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYXBpLnNldCBvcHRpb25zLmhlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYXBpLnNlbmQgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICguZW5kIChmbiBbZXJyIHJlc3BvbnNlXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIChvciBlcnIgKG5vdCByZXNwb25zZS5vaykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZWplY3QgKG9yIGVyciAobmV3LWVycm9yIFwidW5kZWZpbmVkIGVycm9yLlwiIHJlc3BvbnNlIGVycikpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVzb2x2ZSByZXNwb25zZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgKSkpKVxuICAgKC50aGVuIChmbiBvYmplY3Q/IFtyZXNwb25zZV1cbiAgICAgICAgICAgIChibHVlYmlyZC4gKGZuIFtyZXNvbHZlIHJlamVjdF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAoaWYgb3B0aW9ucy5pcy1hcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIChsb2Rhc2guaXMtYXJyYXkgcmVzcG9uc2UuYm9keSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJlc29sdmUgcmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZWplY3QgKG5ldy1lcnJvciBcIklzIG5vdCBBcnJheS5cIiByZXNwb25zZSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIChsb2Rhc2guaXMtb2JqZWN0IHJlc3BvbnNlLmJvZHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZXNvbHZlIHJlc3BvbnNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVqZWN0IChuZXctZXJyb3IgXCJJcyBub3QgT2JqZWN0LlwiIHJlc3BvbnNlKSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICkpKSlcbiAgICgudGhlbiAoZm4gdG8tcmVzb3VyY2UgW3Jlc3BvbnNlXVxuICAgICAgICAgICAgKGJsdWViaXJkLiAoZm4gW3Jlc29sdmUgcmVqZWN0XVxuICAgICAgICAgICAgICAgICAgICAgICAgIChpZiBvcHRpb25zLmlzLWFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAocmVzb2x2ZSAobG9kYXNoLm1hcCAoZm4gW3JlY29yZF0gKGNsYXp6LiByZWNvcmQgcmVzcG9uc2UpKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAocmVzb2x2ZSAoY2xhenouIHJlc3BvbnNlLmJvZHkgcmVzcG9uc2UpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICApKSkpXG4gICApKVxuXG4oc2V0ISBtb2R1bGUuZXhwb3J0cyByZXF1ZXN0KVxuXG5cblxuKGRlZm4tIG5ldy1lcnJvciBbbXNnIHJlc3BvbnNlIGVycl1cbiAgKGxldCBbbmV3LWVyciAoRXJyb3IuIG1zZyldXG4gICAgKGxvZGFzaC5leHRlbmQgbmV3LWVyclxuICAgICAgICAgICAgICAgICAgIHtvcmlnaW5hbCBlcnJcbiAgICAgICAgICAgICAgICAgICAgcmVzcG9uc2UgcmVzcG9uc2VcbiAgICAgICAgICAgICAgICAgICAgc3RhdHVzIChpZiByZXNwb25zZSByZXNwb25zZS5zdGF0dXMgbnVsbCl9KVxuICAgICkpXG5cbihkZWZtYWNybyAtPlxuICBbJiBvcGVyYXRpb25zXVxuICAocmVkdWNlXG4gICAoZm4gW2Zvcm0gb3BlcmF0aW9uXVxuICAgICAoY29ucyAoZmlyc3Qgb3BlcmF0aW9uKVxuICAgICAgICAgICAoY29ucyBmb3JtIChyZXN0IG9wZXJhdGlvbikpKSlcbiAgIChmaXJzdCBvcGVyYXRpb25zKVxuICAgKHJlc3Qgb3BlcmF0aW9ucykpKVxuIl19
