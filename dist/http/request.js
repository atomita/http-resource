{
    var _ns_ = {
        id: 'atomita.http.request',
        doc: 'http request module'
    };
    var superagent = require('superagent');
    var bluebird = require('bluebird');
    var lodash = require('lodash');
}
void 0;
var request = function request(method, url, params, options, clazz) {
    options = options || {};
    clazz = clazz || Object;
    return bluebird.resolve().then(function callApi() {
        return new bluebird(function (resolve, reject) {
            return function () {
                var apiø1 = superagent(method.toLowerCase(), url);
                lodash.has(options, 'query') ? apiø1.query(options.query) : void 0;
                lodash.has(options, 'header') ? apiø1.set(options.header) : void 0;
                return apiø1.send(params).end(function (err, response) {
                    return err || !response.ok ? reject(err || newError('undefined error.', response, err)) : resolve(response);
                });
            }.call(this);
        });
    }).then(function isObject(response) {
        return new bluebird(function (resolve, reject) {
            return options.isArray ? lodash.isArray(response.body) ? resolve(response) : reject(newError('Is not Array.', response)) : lodash.isObject(response.body) ? resolve(response) : reject(newError('Is not Object.', response));
        });
    }).then(function toResource(response) {
        return new bluebird(function (resolve, reject) {
            return options.isArray ? resolve(lodash.map(response.body, function (record) {
                return new clazz(record, response);
            })) : resolve(new clazz(response.body, response));
        });
    });
};
module.exports = request;
var newError = function newError(msg, response, err) {
    return function () {
        var newErrø1 = new Error(msg);
        return lodash.extend(newErrø1, {
            original: err,
            response: response,
            status: response ? response.status : null
        });
    }.call(this);
};
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFub255bW91cy53aXNwIl0sIm5hbWVzIjpbIl9uc18iLCJpZCIsImRvYyIsInJlcXVlc3QiLCJtZXRob2QiLCJ1cmwiLCJwYXJhbXMiLCJvcHRpb25zIiwiY2xhenoiLCJPYmplY3QiLCJibHVlYmlyZCIsInJlc29sdmUiLCJ0aGVuIiwiY2FsbEFwaSIsInJlamVjdCIsImFwacO4MSIsInN1cGVyYWdlbnQiLCJ0b0xvd2VyQ2FzZSIsImxvZGFzaCIsImhhcyIsInF1ZXJ5Iiwic2V0IiwiaGVhZGVyIiwic2VuZCIsImVuZCIsImVyciIsInJlc3BvbnNlIiwib2siLCJuZXdFcnJvciIsImlzT2JqZWN0IiwiaXNBcnJheSIsImJvZHkiLCJ0b1Jlc291cmNlIiwibWFwIiwicmVjb3JkIiwibW9kdWxlIiwiZXhwb3J0cyIsIm1zZyIsIm5ld0VycsO4MSIsImV4dGVuZCIsInN0YXR1cyIsIm51bGwiXSwibWFwcGluZ3MiOiI7SUFBQSxJQUFDQSxJLEdBQUQ7QUFBQSxRQUFBQyxFLEVBQUksc0JBQUo7QUFBQSxRQUFBQyxHLEVBQ0UscUJBREY7QUFBQSxNOzs7Ozs7QUFlQSxJQUFPQyxPQUFBLEdBQVAsU0FBT0EsT0FBUCxDQUNHQyxNQURILEVBQ1VDLEdBRFYsRUFDY0MsTUFEZCxFQUNxQkMsT0FEckIsRUFDNkJDLEtBRDdCLEVBRUU7QUFBQSxJQUFNRCxPQUFOLEdBQWtCQSxPQUFKLElBQVksRUFBMUI7QUFBQSxJQUNNQyxLQUFOLEdBQWdCQSxLQUFKLElBQVVDLE1BQXRCLENBREE7QUFBQSxJQUVBLE9BQ0VDLFFBQUEsQ0FBU0MsT0FBVixFQUNDLENBQUNDLEksQ0FBSyxTQUFJQyxPQUFKLEdBQ0U7QUFBQSxtQixRQUFBLENBQVcsVUFBS0YsT0FBTCxFQUFhRyxNQUFiLEVBQ0U7QUFBQSxtQixZQUFNO0FBQUEsb0JBQUFDLEssR0FBS0MsVUFBRCxDQUFhWixNQUFBLENBQU9hLFdBQVIsRUFBWixFQUFtQ1osR0FBbkMsQ0FBSjtBQUFBLGdCQUNDYSxNQUFBLENBQU9DLEdBQVIsQ0FBWVosT0FBWixFLE9BQUEsQ0FBSixHQUNHUSxLQUFBLENBQUlLLEtBQUwsQ0FBV2IsT0FBQSxDQUFRYSxLQUFuQixDQURGLEcsTUFBQSxDQURJO0FBQUEsZ0JBR0NGLE1BQUEsQ0FBT0MsR0FBUixDQUFZWixPQUFaLEUsUUFBQSxDQUFKLEdBQ0dRLEtBQUEsQ0FBSU0sR0FBTCxDQUFTZCxPQUFBLENBQVFlLE1BQWpCLENBREYsRyxNQUFBLENBSEk7QUFBQSxnQkFLSixPQUNFUCxLQUFBLENBQUlRLElBQUwsQ0FBVWpCLE1BQVYsQ0FDQyxDQUFDa0IsR0FGSCxDQUVPLFVBQUtDLEdBQUwsRUFBU0MsUUFBVCxFQUNFO0FBQUEsMkJBQVFELEdBQUosSUFBUSxDQUFLQyxRQUFBLENBQVNDLEVBQTFCLEdBQ0diLE1BQUQsQ0FBWVcsR0FBSixJQUFTRyxRQUFELENBQVcsa0JBQVgsRUFBOEJGLFFBQTlCLEVBQXVDRCxHQUF2QyxDQUFoQixDQURGLEdBRUdkLE9BQUQsQ0FBU2UsUUFBVCxDQUZGO0FBQUEsaUJBSFQsRUFMSTtBQUFBLGEsS0FBTixDLElBQUE7QUFBQSxTQURiO0FBQUEsSyxDQWNSLENBQUNkLEksQ0FBSyxTQUFJaUIsUUFBSixDQUFhSCxRQUFiLEVBQ0U7QUFBQSxtQixRQUFBLENBQVcsVUFBS2YsT0FBTCxFQUFhRyxNQUFiLEVBQ0U7QUFBQSxtQkFBSVAsT0FBQSxDQUFRdUIsT0FBWixHQUNPWixNQUFBLENBQU9ZLE9BQVIsQ0FBaUJKLFFBQUEsQ0FBU0ssSUFBMUIsQ0FBSixHQUNHcEIsT0FBRCxDQUFTZSxRQUFULENBREYsR0FFR1osTUFBRCxDQUFTYyxRQUFELENBQVcsZUFBWCxFQUEyQkYsUUFBM0IsQ0FBUixDQUhKLEdBSU9SLE1BQUEsQ0FBT1csUUFBUixDQUFrQkgsUUFBQSxDQUFTSyxJQUEzQixDQUFKLEdBQ0dwQixPQUFELENBQVNlLFFBQVQsQ0FERixHQUVHWixNQUFELENBQVNjLFFBQUQsQ0FBVyxnQkFBWCxFQUE0QkYsUUFBNUIsQ0FBUixDQU5KO0FBQUEsU0FEYjtBQUFBLEssQ0FTUixDQUFDZCxJQTNCSCxDQTJCUSxTQUFJb0IsVUFBSixDQUFpQk4sUUFBakIsRUFDRTtBQUFBLG1CLFFBQUEsQ0FBVyxVQUFLZixPQUFMLEVBQWFHLE1BQWIsRUFDRTtBQUFBLG1CQUFJUCxPQUFBLENBQVF1QixPQUFaLEdBQ0duQixPQUFELENBQVVPLE1BQUEsQ0FBT2UsR0FBUixDQUFZUCxRQUFBLENBQVNLLElBQXJCLEVBQTBCLFVBQUtHLE1BQUwsRUFBYTtBQUFBLDJCLEtBQUEsQ0FBUUEsTUFBUixFQUFlUixRQUFmO0FBQUEsYUFBdkMsQ0FBVCxDQURGLEdBRUdmLE9BQUQsQ0FBUyxJLEtBQUEsQ0FBUWUsUUFBQSxDQUFTSyxJQUFqQixFQUFzQkwsUUFBdEIsQ0FBVCxDQUZGO0FBQUEsU0FEYjtBQUFBLEtBNUJWLEVBRkE7QUFBQSxDQUZGLEM7QUF1Q01TLE1BQUEsQ0FBT0MsT0FBYixHQUFxQmpDLE9BQXJCLEM7QUFJQSxJQUFPeUIsUUFBQSxHQUFQLFNBQU9BLFFBQVAsQ0FBa0JTLEdBQWxCLEVBQXNCWCxRQUF0QixFQUErQkQsR0FBL0IsRUFDRTtBQUFBLFcsWUFBTTtBQUFBLFlBQUFhLFEsR0FBUSxJLEtBQUEsQ0FBUUQsR0FBUixDQUFSO0FBQUEsUUFDSixPQUFDbkIsTUFBQSxDQUFPcUIsTUFBUixDQUFlRCxRQUFmLEVBQ2U7QUFBQSxZLFVBQVViLEdBQVY7QUFBQSxZLFVBQ1VDLFFBRFY7QUFBQSxZLFFBRVlBLFFBQUosR0FBYUEsUUFBQSxDQUFTYyxNQUF0QixHQUE2QkMsSUFGckM7QUFBQSxTQURmLEVBREk7QUFBQSxLLEtBQU4sQyxJQUFBO0FBQUEsQ0FERiIsInNvdXJjZXNDb250ZW50IjpbIihucyBhdG9taXRhLmh0dHAucmVxdWVzdFxuICBcImh0dHAgcmVxdWVzdCBtb2R1bGVcIlxuICAoOnJlcXVpcmUgW3N1cGVyYWdlbnRdXG4gICAgICAgICAgICBbYmx1ZWJpcmRdXG4gICAgICAgICAgICBbbG9kYXNoXSkpXG5cbihkZWZtYWNybyAtPlxuICBbJiBvcGVyYXRpb25zXVxuICAocmVkdWNlXG4gICAoZm4gW2Zvcm0gb3BlcmF0aW9uXVxuICAgICAoY29ucyAoZmlyc3Qgb3BlcmF0aW9uKVxuICAgICAgICAgICAoY29ucyBmb3JtIChyZXN0IG9wZXJhdGlvbikpKSlcbiAgIChmaXJzdCBvcGVyYXRpb25zKVxuICAgKHJlc3Qgb3BlcmF0aW9ucykpKVxuXG4oZGVmbi0gcmVxdWVzdFxuICBbbWV0aG9kIHVybCBwYXJhbXMgb3B0aW9ucyBjbGF6el1cbiAgKHNldCEgb3B0aW9ucyAob3Igb3B0aW9ucyB7fSkpXG4gIChzZXQhIGNsYXp6IChvciBjbGF6eiBPYmplY3QpKVxuICAoLT5cbiAgIChibHVlYmlyZC5yZXNvbHZlKVxuICAgKC50aGVuIChmbiBjYWxsLWFwaSBbXVxuICAgICAgICAgICAgKGJsdWViaXJkLiAoZm4gW3Jlc29sdmUgcmVqZWN0XVxuICAgICAgICAgICAgICAgICAgICAgICAgIChsZXQgW2FwaSAoc3VwZXJhZ2VudCAobWV0aG9kLnRvLWxvd2VyLWNhc2UpIHVybCldXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoaWYgKGxvZGFzaC5oYXMgb3B0aW9ucyA6cXVlcnkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChhcGkucXVlcnkgb3B0aW9ucy5xdWVyeSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoaWYgKGxvZGFzaC5oYXMgb3B0aW9ucyA6aGVhZGVyKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYXBpLnNldCBvcHRpb25zLmhlYWRlcikpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAoLT5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAoYXBpLnNlbmQgcGFyYW1zKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICguZW5kIChmbiBbZXJyIHJlc3BvbnNlXVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIChvciBlcnIgKG5vdCByZXNwb25zZS5vaykpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZWplY3QgKG9yIGVyciAobmV3LWVycm9yIFwidW5kZWZpbmVkIGVycm9yLlwiIHJlc3BvbnNlIGVycikpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVzb2x2ZSByZXNwb25zZSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICApKSkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgKSkpKVxuICAgKC50aGVuIChmbiBvYmplY3Q/IFtyZXNwb25zZV1cbiAgICAgICAgICAgIChibHVlYmlyZC4gKGZuIFtyZXNvbHZlIHJlamVjdF1cbiAgICAgICAgICAgICAgICAgICAgICAgICAoaWYgb3B0aW9ucy5pcy1hcnJheVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIChsb2Rhc2guaXMtYXJyYXkgcmVzcG9uc2UuYm9keSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgKHJlc29sdmUgcmVzcG9uc2UpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZWplY3QgKG5ldy1lcnJvciBcIklzIG5vdCBBcnJheS5cIiByZXNwb25zZSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgKGlmIChsb2Rhc2guaXMtb2JqZWN0IHJlc3BvbnNlLmJvZHkpXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZXNvbHZlIHJlc3BvbnNlKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAocmVqZWN0IChuZXctZXJyb3IgXCJJcyBub3QgT2JqZWN0LlwiIHJlc3BvbnNlKSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICkpKSlcbiAgICgudGhlbiAoZm4gdG8tcmVzb3VyY2UgW3Jlc3BvbnNlXVxuICAgICAgICAgICAgKGJsdWViaXJkLiAoZm4gW3Jlc29sdmUgcmVqZWN0XVxuICAgICAgICAgICAgICAgICAgICAgICAgIChpZiBvcHRpb25zLmlzLWFycmF5XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAocmVzb2x2ZSAobG9kYXNoLm1hcCByZXNwb25zZS5ib2R5IChmbiBbcmVjb3JkXSAoY2xhenouIHJlY29yZCByZXNwb25zZSkpKSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgIChyZXNvbHZlIChjbGF6ei4gcmVzcG9uc2UuYm9keSByZXNwb25zZSkpKVxuICAgICAgICAgICAgICAgICAgICAgICAgICkpKSlcbiAgICkpXG5cbihzZXQhIG1vZHVsZS5leHBvcnRzIHJlcXVlc3QpXG5cblxuXG4oZGVmbi0gbmV3LWVycm9yIFttc2cgcmVzcG9uc2UgZXJyXVxuICAobGV0IFtuZXctZXJyIChFcnJvci4gbXNnKV1cbiAgICAobG9kYXNoLmV4dGVuZCBuZXctZXJyXG4gICAgICAgICAgICAgICAgICAge29yaWdpbmFsIGVyclxuICAgICAgICAgICAgICAgICAgICByZXNwb25zZSByZXNwb25zZVxuICAgICAgICAgICAgICAgICAgICBzdGF0dXMgKGlmIHJlc3BvbnNlIHJlc3BvbnNlLnN0YXR1cyBudWxsKX0pXG4gICAgKSlcbiJdfQ==
